security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        eleve_provider:
            entity:
                class: App\Entity\Eleve
                property: email

        formateur_provider:
            entity:
                class: App\Entity\Formateur
                property: email
        all_users:
            chain:
                providers: ['eleve_provider', 'formateur_provider']

    firewalls:

        eleve_area:
            pattern: ^/eleve
            lazy: true
            provider: eleve_provider
            context: link
            custom_authenticator: App\Security\EleveFormAuthenticator
            logout:
                path: /logout
        formateur_area:
            pattern: ^/formateur
            lazy: true
            provider: formateur_provider
            context: link
            custom_authenticator: App\Security\FormateurFormAuthenticator
            logout:
                path: /logout
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false        
        main:
            lazy: true
            provider: all_users
            context: link
            logout:
                path: /logout

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
